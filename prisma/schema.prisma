generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Gender enum
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum orderStatus {
  PENDING
  PLACED
  PICKED
  CANCELLED
}

enum paymentStatus {
  PENDING
  SUCCESSFUL
}

model user {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  addressLine1  String?
  addressLine2  String?
  city          String?
  country       String?
  countryCode   String?       @default("+91")
  dateOfBirth   DateTime?
  emailAddress  String?       @unique
  enabled       Boolean       @default(true)
  firstName     String?
  gender        Gender?
  isOTPVerified Boolean       @default(false)
  lastName      String?
  state         String?
  userImage     String?
  otp           Int?
  otpExpiry     DateTime?
  userName      String?       @unique
  zipCode       String?
  phoneNumber   String        @unique
  //Foregin Key 
  cart          cartDetails?
  order         orderDetail[]

  @@map("users")
}

model admin {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  emailAddress String    @unique
  countryCode  String?
  phoneNumber  String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  country      String?
  zipcode      String?
  gender       Gender?
  dateOfBirth  DateTime?
  username     String    @unique
  password     String
  userImage    String?
  roleType     String    @default("admin")
  accessID     Int?      @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  enabled      Boolean   @default(true)

  @@map("admins")
}

model vendor {
  id                Int                 @id @default(autoincrement())
  firstName         String
  lastName          String
  emailAddress      String              @unique
  countryCode       String?
  phoneNumber       String?
  addressLine1      String?
  addressLine2      String?
  city              String?
  state             String?
  country           String?
  zipcode           String?
  gender            Gender?
  dateOfBirth       DateTime?
  username          String              @unique
  password          String
  userImage         String?
  roleType          String?
  accessID          Int?                @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  enabled           Boolean             @default(true)
  //one-to-many relationship with subCategoryDetail
  subCategoryDetail subCategoryDetail[]
  inventory         inventory[]

  @@map("vendors")
}

model categoryDetail {
  id                Int                 @id @default(autoincrement())
  categoryName      String
  categoryDetails   String
  categoryImageLink String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  enabled           Boolean             @default(true)
  //one-to-many relationship with subCategoryDetail
  subCategories     subCategoryDetail[]

  @@map("categories")
}

model subCategoryDetail {
  id                   Int             @id @default(autoincrement())
  categoryDetailsID    Int
  subCategoryName      String
  subCategoryDetails   String
  subCategoryImageLink String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  enabled              Boolean         @default(true)
  products             productDetail[]
  // Define the relationship with categoryDetail
  categoryDetail       categoryDetail? @relation(fields: [categoryDetailsID], references: [id])
  vendor               vendor?         @relation(fields: [vendorId], references: [id])
  vendorId             Int?

  @@map("subCategories")
}

model productDetail {
  id                   Int      @id @default(autoincrement())
  subCategoryDetailsID Int
  productName          String
  measureQuantity      Float
  measureUnit          String   @default("mL")
  countryOfOrigin      String   @default("India")
  ABV                  Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  enabled              Boolean  @default(true)

  //one-to-many relationship with inventory
  inventory         inventory[]
  // Define the relationship with categoryDetail
  subCategoryDetail subCategoryDetail? @relation(fields: [subCategoryDetailsID], references: [id])

  @@map("products")
}

model inventory {
  id                Int            @id @default(autoincrement())
  vendorBusinessID  Int
  productDetailsID  Int
  productPrice      Float
  totalQuantity     Int
  availableQuantity Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt()
  enabled           Boolean        @default(true)
  cartDetailsId     Int? // why?
  // Foreign key
  vendor            vendor?        @relation(fields: [vendorBusinessID], references: [id])
  productDetails    productDetail? @relation(fields: [productDetailsID], references: [id])
  cartDetails       cartDetails?   @relation(fields: [cartDetailsId], references: [id])
}

model cartDetails {
  id               Int         @id @default(autoincrement())
  userDetailsID    Int         @unique
  inventoryId      Int[]
  quantity         Int[]
  price            Int[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt()
  enabled          Boolean     @default(true)
  // Foreign key
  userDetails      user?       @relation(fields: [userDetailsID], references: [id])
  inventoryDetails inventory[]
  // orderDetail      orderDetail?
}

model orderDetail {
  id            Int         @id @default(autoincrement())
  userDetailsID Int // Foreign key referencing cartDetails
  inventoryId   Int[]
  quantity      Int[]
  Status        orderStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Define the relationship with cartDetails
  // cartDetails cartDetails        @relation(fields: [cartDetailsID], references: [id])
  userDetails user?              @relation(fields: [userDetailsID], references: [id])
  transaction transactionDetail?

  @@map("orders")
}

model transactionDetail {
  id          Int            @id @default(autoincrement())
  orderID     Int            @unique
  amount      Float
  paymentMode String?
  status      paymentStatus?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  order orderDetail? @relation(fields: [orderID], references: [id])

  @@map("transactions")
}
