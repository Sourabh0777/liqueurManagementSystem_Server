generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Gender enum
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum orderStatus {
  PENDING
  PLACED
  PICKED
  CANCELLED
}

enum paymentStatus {
  PENDING
  SUCCESSFUL
}

model user {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  addressLine1  String?
  addressLine2  String?
  city          String?
  country       String?
  countryCode   String?   @default("+91")
  dateOfBirth   DateTime?
  emailAddress  String?   @unique
  enabled       Boolean   @default(true)
  firstName     String?
  gender        Gender?
  isOTPVerified Boolean   @default(false)
  lastName      String?
  state         String?
  userImage     String?
  otp           Int?
  otpExpiry     DateTime?
  userName      String?   @unique
  zipCode       String?
  phoneNumber   String    @unique

  @@map("users")
}

model admin {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  emailAddress  String    @unique
  countryCode   String?
  phoneNumber   String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  country       String?
  zipcode       String?
  gender        Gender?
  dateOfBirth   DateTime?
  username      String    @unique
  password      String
  userImage     String?
  roleType      String    @default("admin") 
  accessID      Int?       @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  enabled       Boolean   @default(true)

  @@map("admins")
}


model vendor{
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  emailAddress  String    @unique
  countryCode   String?
  phoneNumber   String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  country       String?
  zipcode       String?
  gender        Gender?
  dateOfBirth   DateTime?
  username      String    @unique
  password      String
  userImage     String?
  roleType      String?
  accessID      Int?       @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  enabled       Boolean   @default(true)

  @@map("vendors")
}


model categoryDetail {
  id                  Int            @id @default(autoincrement())
  categoryName        String         @unique
  categoryDetails     String?
  categoryImageLink   String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  enabled             Boolean        @default(true)
  
  // Relationship with subcategories
  subCategories       subCategoryDetail[]
  @@map("categories")
}

model subCategoryDetail {
  id                  Int            @id @default(autoincrement())
  categoryDetailsID   Int
  subCategoryName     String         @unique
  subCategoryDetails  String?
  subCategoryImageLink String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  enabled             Boolean        @default(true)

  // Relationship with products
  products            productDetail[]
  
  // Foreign key
  category            categoryDetail  @relation(fields: [categoryDetailsID], references: [id])
  @@map("subCategories")
}

model productDetail {
  id                   Int            @id @default(autoincrement())
  subCategoryDetailsID Int
  productName          String         @unique
  measureQuantity      Float
  measureUnit          String
  countryOfOrigin      String
  alcoholByVolume      Float
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  enabled              Boolean        @default(true)

  // Relationship with subcategories
  subCategories        subCategoryDetail @relation(fields: [subCategoryDetailsID], references: [id])
  @@map("products")
}

// model orderDetail{
//   id                    Int @id @default(autoincrement())
//   cartDetailsID         Int
//   quantity              Int
//   Status                orderStatus
//   createdAt             DateTime      @default(now())
//   updatedAt             DateTime      @updatedAt


   // Relation with cartDetails
  // cartDetails           CartDetails  @relation(fields: [cartDetailsID], references: [id])

    // transaction            transactionDetail

//   @@map("orders")
// }

// model transactionDetail{
//   id                    Int @id @default(autoincrement())
//   orderID               Int
//   amount                Float
//   paymentMode           String
//   status                paymentStatus
//   createdAt             DateTime      @default(now())
//   updatedAt             DateTime      @updatedAt

    //  order                 orderDetail   @relation(fields: [orderID], references: [id])
//   @@map("transactions")
// }